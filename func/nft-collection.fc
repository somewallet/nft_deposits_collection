;; NFT Stakable collection smart contract

;; Storage
;;
;; owner_address slice
;; next_item_index int64
;; content cell
;; nft_item_code cell
;; royalty_params cell
;; staking_data cell (int32, int64)
;; staking_contracts_dict dict (cell)
;; stored_seqno int32
;; public_key int256

;; COLLECTION: kQC95iC-KWrgdSlGfxkQMfBAGItpGZvLeMHuoCIU0Nn95JdP
;; NFT: EQCDV0mZwQ4Esacx942JGepcAC-tZgIbddOU9UltRQZ4oTtJ
;; BUILD: toncli build
;; DEPLOY COLLECTION: toncli deploy nft_collection
;; DEPOSIT: toncli send --amount 5 --net testnet --address kQC95iC-KWrgdSlGfxkQMfBAGItpGZvLeMHuoCIU0Nn95JdP --body /home/some_wallet/dev/projects/nft_deposits_collection/fift/deposit.fif
;; CLAIM_REWARD: toncli send --amount 0.02 --net testnet --address EQCDV0mZwQ4Esacx942JGepcAC-tZgIbddOU9UltRQZ4oTtJ --body /home/some_wallet/dev/projects/nft_deposits_collection/fift/claim_reward.fif
;; toncli get --address kQC95iC-KWrgdSlGfxkQMfBAGItpGZvLeMHuoCIU0Nn95JdP get_deposit_data_by_nft_index 0
;; toncli get --address kQC95iC-KWrgdSlGfxkQMfBAGItpGZvLeMHuoCIU0Nn95JdP get_staking_contracts_dict
;; toncli get --address kQC95iC-KWrgdSlGfxkQMfBAGItpGZvLeMHuoCIU0Nn95JdP get_everything
;; toncli get get_nft_data -a kQC95iC-KWrgdSlGfxkQMfBAGItpGZvLeMHuoCIU0Nn95JdP --fift ./fift/parse-data-nft-collection.fif

#pragma version >=0.4.0;
#include "../lib/func/stdlib.fc";
#include "../lib/func/messages.fc";
#include "utils/constants.fc";
#include "utils/op-codes.fc";
#include "utils/params.fc";

(slice, int, cell, cell, cell, int, int, int, int, cell) load_data() inline {

  var ds = get_data().begin_parse();

  (
    slice owner_address,
    int next_item_index,
    cell content,
    cell nft_item_code,
    cell royalty_params,
    cell extension
  ) = (
    ds~load_msg_addr(), ;; owner_address
    ds~load_uint(64), ;; next_item_index
    ds~load_ref(), ;; content
    ds~load_ref(), ;; nft_item_code
    ds~load_ref(), ;; royalty_params
    ds~load_ref() ;; extension
  );

  slice extension_slice = extension.begin_parse();

  int stored_seqno = extension_slice~load_uint(32);
  int public_key = extension_slice~load_uint(256);
  int min_deposit_amount = extension_slice~load_uint(64);
  int semi_annual_yield = extension_slice~load_uint(64);

  cell staking_contracts_dict = new_dict();

  if (extension_slice.slice_bits() > 0) { staking_contracts_dict = extension_slice~load_dict(); }

  return (
    owner_address,
    next_item_index,
    content,
    nft_item_code,
    royalty_params,
    stored_seqno,
    public_key,
    min_deposit_amount,
    semi_annual_yield,
    staking_contracts_dict
  );

}

() save_data(

  slice owner_address,
  int next_item_index,
  cell content,
  cell nft_item_code,
  cell royalty_params,
  int stored_seqno,
  int public_key,
  int min_deposit_amount,
  int semi_annual_yield,
  cell staking_contracts_dict

) impure inline {

  cell extension = (
    begin_cell()
      .store_uint(stored_seqno, 32)
      .store_uint(public_key, 256)
      .store_uint(min_deposit_amount, 64)
      .store_uint(semi_annual_yield, 64)
      .store_dict(staking_contracts_dict)
    .end_cell()
  );

  set_data(
    begin_cell()
      .store_slice(owner_address)
      .store_uint(next_item_index, 64)
      .store_ref(content)
      .store_ref(nft_item_code)
      .store_ref(royalty_params)
      .store_ref(extension)
    .end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

cell deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content, cell staking_contracts_dict, slice sender_address, int msg_value, int semi_annual_yield) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain, state_init);
  slice value = (
    begin_cell()
      .store_uint(now() + UNIX_180_DAYS, 32)
      .store_uint((msg_value / 100 * semi_annual_yield + msg_value), 256)
    .end_cell().begin_parse());
  (cell new_staking_contracts_dict, int f) = pfxdict_set?(staking_contracts_dict, nft_address.slice_bits(), nft_address, value);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors

  return new_staking_contracts_dict;
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params, 32)
    .store_uint(query_id, 64)
    .store_slice(data);
  send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() recv_internal (int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (
      owner_address,
      next_item_index,
      content,
      nft_item_code,
      royalty_params,
      stored_seqno,
      public_key,
      min_deposit_amount,
      semi_annual_yield,
      staking_contracts_dict
    ) = load_data();

    if (op == op::deposit) {

      throw_if(777, msg_value < min_deposit_amount);
      
      cell new_staking_contracts_dict = deploy_nft_item(next_item_index, nft_item_code, AMOUNT_FOR_NFT_DEPLOY, in_msg_body~load_ref(), staking_contracts_dict, sender_address, msg_value, semi_annual_yield);

      save_data(
        owner_address, 
        next_item_index + 1, 
        content, 
        nft_item_code, 
        royalty_params, 
        stored_seqno, 
        public_key,
        min_deposit_amount, 
        semi_annual_yield, 
        new_staking_contracts_dict
      );

      return ();

    }

    if (op == op::claim_reward) {

      slice reward_addr = in_msg_body~load_msg_addr();

      (_, slice value, _, int f) = pfxdict_get?(staking_contracts_dict, sender_address.slice_bits(), sender_address);

      int reward_unix_time = value~load_uint(32);
      int reward_amount = value~load_uint(256);
      
      throw_unless(444, f); ;; if nft exists in dict
      throw_unless(555, reward_unix_time <= now()); ;; if time to get reward came
      throw_unless(666, reward_amount <= my_balance); ;; if no sufficient funds

      (cell new_staking_contracts_dict, int flag) = pfxdict_delete?(staking_contracts_dict, sender_address.slice_bits(), sender_address);

      if (flag) {
        messages::send_empty(reward_amount, reward_addr, NORMAL);
      }

      save_data(
        owner_address, 
        next_item_index, 
        content, 
        nft_item_code, 
        royalty_params, 
        stored_seqno, 
        public_key,
        min_deposit_amount, 
        semi_annual_yield, 
        new_staking_contracts_dict
      );

      return ();

    }

    if (op == op::get_royalty_params) {

        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());

        return ();
        
    }

    throw_unless(401, equal_slices(sender_address, owner_address));

    cell new_staking_contracts_dict = new_dict();

    if (op == 1) { ;; deploy new nft
      int item_index = in_msg_body~load_uint(64);
      throw_unless(402, item_index <= next_item_index);
      var is_last = item_index == next_item_index;
      new_staking_contracts_dict = deploy_nft_item(item_index, nft_item_code, in_msg_body~load_coins(), in_msg_body~load_ref(), staking_contracts_dict, sender_address, msg_value, semi_annual_yield);
      if (is_last) {
        next_item_index += 1;
        save_data (
          owner_address, 
          next_item_index, 
          content, 
          nft_item_code, 
          royalty_params,
          stored_seqno, 
          public_key,
          min_deposit_amount, 
          semi_annual_yield, 
          new_staking_contracts_dict
        );
      }
      return ();
    }

    if (op == 2) { ;; batch deploy of new nfts
      int counter = 0;
      cell deploy_list = in_msg_body~load_ref();
      do {
        var (item_index, item, f?) = deploy_list~udict::delete_get_min(64);
        if (f?) {
          counter += 1;
          if (counter >= 250) { ;; Limit due to limits of action list size
            throw(399);
          }

          throw_unless(403 + counter, item_index <= next_item_index);
          new_staking_contracts_dict = deploy_nft_item(item_index, nft_item_code, item~load_coins(), item~load_ref(), staking_contracts_dict, sender_address, msg_value, semi_annual_yield);
          if (item_index == next_item_index) {
            next_item_index += 1;
          }
        }
      } until ( ~ f?);
      save_data(
        owner_address, 
        next_item_index, 
        content, 
        nft_item_code, 
        royalty_params, 
        stored_seqno, 
        public_key,
        min_deposit_amount, 
        semi_annual_yield, 
        new_staking_contracts_dict
      );
      return ();
    }
    if (op == 3) { ;; change owner
      slice new_owner = in_msg_body~load_msg_addr();
      save_data(
        new_owner, 
        next_item_index, 
        content, 
        nft_item_code, 
        royalty_params, 
        stored_seqno, 
        public_key,
        min_deposit_amount, 
        semi_annual_yield, 
        staking_contracts_dict
        );
      return ();
    }
    if (op == 4) { ;; change content
      save_data(
        owner_address, 
        next_item_index, 
        in_msg_body~load_ref(), 
        nft_item_code, 
        in_msg_body~load_ref(), 
        stored_seqno, 
        public_key,
        min_deposit_amount, 
        semi_annual_yield, 
        staking_contracts_dict
      );
      return ();
    }
    throw(0xffff);
}

() recv_external (int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

  var signature = in_msg_body~load_bits(512);
  var cs = in_msg_body;

  var msg_segno = cs~load_uint(32);

  var (_, _, _, _, _, stored_seqno, public_key, _, _, _) = load_data();

  throw_unless(33, msg_segno == stored_seqno);
  throw_unless(35, check_signature(slice_hash(in_msg_body), signature, public_key));

  accept_message();

  cs~touch();

  int op = cs~load_uint(64);

  if (op == op::init_staking) {
    
  }

  if (op == op::withdraw_funds) {

  }

  if (op == op::terminate_stacking) {

  }

  throw(0xffff);

}

;; Extension's get-methods

(int, int) get_deposit_data_by_nft_index (int index) method_id {

  var (_, _, _, nft_item_code, _, _, _, _, _, staking_contracts_dict) = load_data();

  cell state_init = calculate_nft_item_state_init(index, nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain, state_init);

  (_, slice value, _, int f) = pfxdict_get?(staking_contracts_dict, nft_address.slice_bits(), nft_address);

  int reward_unix_time = value~load_uint(32);
  int reward_amount = value~load_uint(256);

  return (reward_unix_time, reward_amount);

}

(cell) get_staking_contracts_dict () method_id {

  var (_, _, _, _, _, _, _, _, _, staking_contracts_dict) = load_data();

  return staking_contracts_dict;

}

(slice, int, cell, cell, cell, int, int, int, int, cell) get_everything () method_id {
  return load_data();
}

;; Standard get-methods

(int, cell, slice) get_collection_data() method_id {
  var (owner_address, next_item_index, content, _, _, _, _, _, _, _) = load_data();
  slice cs = content.begin_parse();
  return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _, _, _, _, _, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain, state_init);
}

(int, int, slice) royalty_params() method_id {
     var (_, _, _, _, royalty, _, _, _, _, _) = load_data();
     slice rs = royalty.begin_parse();
     return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
  var (_, _, content, _, _, _, _, _, _, _) = load_data();
  slice cs = content.begin_parse();
  cs~load_ref();
  slice common_content = cs~load_ref().begin_parse();
  return (begin_cell()
                      .store_uint(1, 8) ;; offchain tag
                      .store_slice(common_content)
                      .store_ref(individual_nft_content)
          .end_cell());
}

